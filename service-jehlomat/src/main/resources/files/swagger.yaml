swagger: '2.0'
info:
  description: >-
    Jehlomat REST api
  version: 0.0.2
  title: Jehlomat
  termsOfService: https://swagger.io/terms/
  contact:
    email: radekludacka@gmail.com
host: localhost:8089
basePath: /api/v1/jehlomat
schemes:
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /login:
    post:
      summary: Log in the application
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        '200':
          description: Created
          schema:
            type: object
            properties:
              token:
                type: string
        '401':
          description: Name or password is wrong
  /password-reset/send-code:
    post:
      summary: Initiate a password reset
      description: Send a reset email to the user
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
      responses:
        '204':
          description: Email sent
        '404':
          description: User with sent email not found
  /password-reset/test-code:
    post:
      summary: Test a password reset code
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              userId:
                type: string
              code:
                type: string
      responses:
        '204':
          description: The code is valid
        '404':
          description: The code doesn't exist or isn't valid
  /password-reset/save:
    post:
      summary: Set a new password for specific user
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              userId:
                type: string
              code:
                type: string
              password:
                type: string
      responses:
        '204':
          description: The password is set
        '400':
          description: The password doesn't met criteria
        '404':
          description: The reset code isn't valid
  /organization/{id}:
    get:
      summary: Find organization by id
      description: Returns a single organization
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: Id of organization to return
          required: true
          type: integer
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Organization'
        '404':
          description: Organization not found
  /organization/{id}/users:
    get:
      summary: Get organization users
      description: Returns a list of users in the requested organization
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: Id of organization
          required: true
          type: integer
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/UserInfo'
        '404':
          description: Organization not found
  /organization/{id}/teams:
    get:
      summary: Get organization teams
      description: Returns a list of teams in the requested organization
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: Id of organization
          required: true
          type: integer
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Team'
        '404':
          description: Organization not found
  /organization:
    get:
      summary: Get all organizations
      produces:
        - application/json
      security:
        - Bearer: []
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Organization'
    post:
      summary: Add a new organization
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: Organization with administrator info that needs to be added
          required: true
          schema:
            $ref: '#/definitions/OrganizationRegistration'
      responses:
        '201':
          description: Created
        '409':
          description: Conflict
    put:
      summary: Update an existing organization
      description: ''
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          description: Organization object that needs to be changed
          required: true
          schema:
            $ref: '#/definitions/Organization'
      responses:
        '200':
          description: Success
        '404':
          description: Organization not found
  /syringe/search:
    post:
      summary: Search syringes by parameters
      description: Returns a list of syringes
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SyringeSearchRequest'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SyringeSearchResponse'
  /syringe/export:
    post:
      summary: Search syringes by parameters and returns CSV table
      description: Returns a list of syringes in CSV format
      produces:
        - text/csv
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SyringeSearch'
      responses:
        '200':
          description: successful operation
          schema:
            type: string
  /syringe:
    post:
      summary: Add a new syringe
      description: ''
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: Found syringe object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/SyringeCreateReq'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/SyringeCreateRes'
        '409':
          description: Conflict
    put:
      summary: Update an existing syringe
      description: ''
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          description: Syringe object that needs to be changed
          required: true
          schema:
            $ref: '#/definitions/SyringeChangeReq'
      responses:
        '200':
          description: Success
  /syringe/{id}:
    get:
      summary: Find syringe by ID
      description: Returns a single syringe
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Syringe'
        '404':
          description: Syringe not found
    delete:
      summary: Delete syringe by ID
      description: Delete a single syringe
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
  /syringe/{id}/info:
    get:
      summary: Get info about specific syringe
      description: Returns a single syringe
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/SyringeInfo'
        '404':
          description: Syringe not found
  /syringe/{id}/summary:
    put:
      summary: Update syringe summary
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          description: Syringe object that needs to be changed
          required: true
          schema:
            $ref: '#/definitions/SyringeCreateReq'
      responses:
        '204':
          description: Successful operation
        '403':
          description: Summary can be changed only by its creator
        '404':
          description: Syringe not found
  /syringe/{id}/demolish:
    post:
      summary: Demolish syringe
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '204':
          description: Successful operation
        '404':
          description: Syringe not found
  /syringe/{id}/reserve:
    post:
      summary: Reserve syringe
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          description: Syringe object that needs to be changed
          required: true
          schema:
            type: object
            properties:
              reservedTill:
                type: number
      responses:
        '204':
          description: Successful operation
        '404':
          description: Syringe not found
  /syringe/{id}/track:
    post:
      summary: Request a syringe track code to be send to an email
      description: ''
      consumes:
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of team to return
          required: true
          type: integer
        - in: body
          name: body
          schema:
            type: object
            properties:
              email:
                type: string
      responses:
        '204':
          description: Email succesfully sent
        '404':
          description: Syringe does not exist
  /team/{id}:
    get:
      summary: Find team by id
      description: Returns a single team
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: Id of team to return
          required: true
          type: integer
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/TeamRequest'
        '404':
          description: Team not found
    delete:
      summary: Delete a team
      description: Delete a team with requested id
      security:
        - Bearer: [ ]
      parameters:
        - name: id
          in: path
          description: Id of team to delete
          required: true
          type: integer
      responses:
        '204':
          description: successful operation
        '403':
          description: Only an organization administrator can delete a team
        '404':
          description: Team not found
        '405':
          description: Team has a active user
  /team/{id}/users:
    get:
      summary: Get team users
      description: Returns a list of users in the requested team
      produces:
        - application/json
      security:
        - Bearer: [ ]
      parameters:
        - name: id
          in: path
          description: Id of team
          required: true
          type: integer
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/UserInfo'
        '404':
          description: Team not found
  /team:
    post:
      summary: Add a new team
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          description: Team object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/TeamRequest'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Team'
        '409':
          description: Conflict
    put:
      summary: Update an existing team
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          description: Team object that needs to be changed
          required: true
          schema:
            $ref: '#/definitions/TeamRequest'
      responses:
        '200':
          description: Success
        '404':
          description: Team not found
  /user/{id}:
    get:
      summary: Find user by id
      description: Returns a single user
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: Id of user to return
          required: true
          type: integer
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UserInfo'
        '404':
          description: User not found
    delete:
      summary: Deactivate user by id
      produces:
        - application/json
      security:
        - Bearer: [ ]
      parameters:
        - name: id
          in: path
          description: Id of user to deactivate
          required: true
          type: integer
      responses:
        '204':
          description: successful operation
        '400':
          description: User is not active
        '404':
          description: User not found
  /user:
    get:
      summary: Get a detail about a current user
      description: Returns a logged in user
      produces:
        - application/json
      security:
        - Bearer: []
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UserDetail'
    post:
      summary: Add a new user
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          description: User email that needs to be added
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
      responses:
        '201':
          description: Created
        '409':
          description: Conflict
  /user/{id}/attributes:
    put:
      summary: Update attributes of an existing user
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: Id of user to change
          required: true
          type: integer
        - in: body
          name: body
          description: User object that needs to be changed
          required: true
          schema:
            $ref: '#/definitions/UserAttr'
      responses:
        '200':
          description: Success
        '404':
          description: User not found
  /user/{id}/password:
    put:
      summary: Update password of an existing user
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: Id of user to change
          required: true
          type: integer
        - in: body
          name: body
          description: User object that needs to be changed
          required: true
          schema:
            $ref: '#/definitions/UserPassword'
      responses:
        '200':
          description: Success
        '404':
          description: User not found
  /verification/organization:
    get:
      summary: Verifies organization
      security:
        - Bearer: []
      parameters:
        - name: orgId
          in: query
          description: Organization id to verify
          type: integer
      responses:
        '200':
          description: Successful operation
        '404':
          description: Organization not found
        '204':
          description: Empty orgId parameter
        '403':
          description: No permissions for the current user to perform such action
  /verification/user:
    post:
      summary: Verify and finish user registration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              code:
                type: string
                description: a registration code
                example: "df5dg3agh8h"
              email:
                type: string
                description: user's email to verify
                example: "jan@novak.cz"
              username:
                type: string
                description: a civil name for the user
                example: "Jan Novak"
              password:
                type: string
                description: password to log in the application
                example: "e5RT1a2fge"
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
        '405':
          description: Parameters violate requirements
  /verification/org-admin:
    post:
      summary: Verify and finish registration of an organization administrator
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              code:
                type: string
                description: a registration code
                example: "df5dg3agh8h"
              userId:
                type: string
                description: user's id
                example: "123"
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
        '405':
          description: Parameters violate requirements
  /location/point:
    get:
      summary: Get combination of locations for gps coordinates
      parameters:
        - name: gps
          in: query
          description: GPS coordinates
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              locationList:
                type: array
                items:
                  $ref: '#/definitions/Location'
        '400':
          description: Not supported format of GPS coordinates
  /location/geometry:
    get:
      summary: Get geometry of location
      parameters:
        - name: type
          in: query
          description: type of location
          type: string
          enum:
            - OKRES
            - OBEC
            - MC
        - name: id
          in: query
          description: id of location
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
  /location/all:
    get:
      summary: Get available locations from database
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              locationList:
                type: array
                items:
                  $ref: '#/definitions/LocationTriple'
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
definitions:
  UserInfo:
    type: object
    properties:
      id:
        type: integer
      username:
        type: string
      organizationId:
        type: integer
      teamId:
        type: integer
      email:
        type: string
        description: Provided only in specific cases
      isAdmin:
        type: boolean
  UserDetail:
    type: object
    properties:
      id:
        type: integer
        example: 0
      email:
        type: string
        example: example@example-user.org
      username:
        type: string
        example: FrantaPepa1
      status:
        type: string
        enum:
          - NOT_VERIFIED
          - ACTIVE
          - DEACTIVATED
      organizationId:
        type: integer
        example: 0
      teamId:
        type: integer
        example: 0
      isAdmin:
        type: boolean
        example: true
  UserAttr:
    type: object
    properties:
      email:
        type: string
        example: example@example-user.org
      username:
        type: string
        example: FrantaPepa1
      teamId:
        type: integer
        example: 0
  UserPassword:
    type: object
    properties:
      oldPassword:
        type: string
        example: Abcde123
      newPassword:
        type: string
        example: Abcde123
  Organization:
    type: object
    properties:
      id:
        type: integer
        example: 0
      name:
        type: string
        example: top organization
      verified:
        type: boolean
        example: false
  OrganizationRegistration:
    type: object
    properties:
      name:
        type: string
        example: top organization
      email:
        type: string
        example: example@example.org
      password:
        type: string
        example: Abcd1234.
  AllOrganizations:
    type: array
    items:
      $ref: '#/definitions/Organization'
  SyringeSearch:
    type: object
    properties:
      locationIds:
        type: array
        items:
          $ref: '#/definitions/LocationId'
      createdAt:
        type: object
        properties:
          from:
            type: integer
            example: 1637092279
          to:
            type: integer
            example: 1637092279
      createdBy:
        type: object
        properties:
          id:
            type: integer
            example: 1
          type:
            type: string
            enum:
              - USER
              - TEAM
              - ORGANIZATION
              - ANONYMOUS
      demolishedAt:
        type: object
        properties:
          from:
            type: integer
            example: 1637092279
          to:
            type: integer
            example: 1637092279
      status:
        type: string
        enum:
          - WAITING
          - RESERVED
          - DEMOLISHED
  SyringeSearchRequest:
    type: object
    properties:
      filter:
        $ref: '#/definitions/SyringeSearch'
      pageInfo:
        type: object
        properties:
          index:
            type: integer
            example: 0
          size:
            type: integer
            example: 20
      ordering:
        type: array
        items:
          type: object
          properties:
            column:
              type: string
              enum:
                - TOWN
                - CREATED_AT
                - CREATED_BY
                - DEMOLISHED_AT
            direction:
              type: string
              enum:
                - ASC
                - DESC
  SyringeSearchResponse:
    type: object
    properties:
      syringeList:
        type: array
        items:
          $ref: '#/definitions/Syringe'
      pageInfo:
        type: object
        properties:
          index:
            type: integer
            example: 0
          size:
            type: integer
            example: 20
          hasMore:
            type: boolean
  Syringe:
    type: object
    properties:
      id:
        type: string
        example: "R4YFD1AC"
      createdAt:
        type: integer
        example: 1637092279
      createdBy:
        $ref: '#/definitions/UserInfo'
      reservedTill:
        type: integer
        example: 1637092279
      reservedBy:
        $ref: '#/definitions/UserInfo'
      demolishedAt:
        type: integer
        example: 1637092279
      demolishedBy:
        $ref: '#/definitions/UserInfo'
      demolisherType:
        type: string
        enum:
          - USER
          - 'NO'
          - CITY_POLICE
        default: 'NO'
      photo:
        type: string
        example: "nothing"
      count:
        type: integer
        example: 1
      note:
        type: string
        example: "note 1"
      gps_coordinates:
        type: string
        example: 13.37 49.72
        description: The format is "longitute latitude"
      demolished:
        type: boolean
        example: false
      location:
        $ref: '#/definitions/Location'
  SyringeChangeReq:
    type: object
    properties:
      id:
        type: string
        example: "R4YFD1AC"
      createdAt:
        type: integer
        example: 1637092279
      createdById:
        type: integer
        example: 12
      reservedTill:
        type: integer
        example: 1637092279
      reservedById:
        type: integer
        example: 31
      demolishedAt:
        type: integer
        example: 1637092279
      demolishedId:
        type: integer
        example: 42
      demolisherType:
        type: string
        enum:
          - USER
          - 'NO'
          - CITY_POLICE
        default: 'USER'
      photo:
        type: string
        example: "nothing"
      count:
        type: integer
        example: 1
      note:
        type: string
        example: "note 1"
      gps_coordinates:
        type: string
        example: 13.37 49.72
        description: The format is "longitute latitude"
      demolished:
        type: boolean
        example: false
      locationId:
        type: integer
        example: 5
  SyringeInfo:
    type: object
    properties:
      id:
        type: string
        example: "R4YFD1AC"
      createdAt:
        type: integer
        example: 1637092279
      photo:
        type: string
        example: "nothing"
      count:
        type: integer
        example: 1
      note:
        type: string
        example: "note 1"
      gps_coordinates:
        type: string
        example: 13.37 49.72
        description: The format is "longitute latitude"
      status:
        type: string
        enum:
          - WAITING
          - RESERVED
          - DEMOLISHED
      location:
        $ref: '#/definitions/Location'
  SyringeCreateReq:
    type: object
    properties:
      createdAt:
        type: integer
        example: 1637092279
      photo:
        type: string
        example: "nothing"
      count:
        type: integer
        example: 1
      note:
        type: string
        example: "note 1"
      gps_coordinates:
        type: string
        example: 13.37 49.72
        description: The format is "longitute latitude"
  SyringeCreateRes:
    type: object
    properties:
      id:
        type: string
        example: "R4YFD1AC"
      teamAvailable:
        type: boolean
  LocationId:
    type: object
    properties:
      id:
        type: string
        example: CZ0323
      type:
        $ref: '#/definitions/LocationType'
  LocationType:
    type: string
    enum:
      - OKRES
      - OBEC
      - MC
  Location:
    type: object
    properties:
      id:
        type: integer
        example: 0
      okres:
        type: string
        example: CZ0323
      okresName:
        type: string
        example: Plzeň-město
      obec:
        type: string
        example: 554791
      obecName:
        type: string
        example: Plzeň
      mestkaCast:
        type: string
        example: 546003
      mestkaCastName:
        type: string
        example: Plzeň 3
  Team:
    type: object
    properties:
      id:
        type: integer
        example: 0
      name:
        type: string
        example: Super team
      locations:
        type: array
        items:
          $ref: '#/definitions/Location'
      organizationId:
        type: integer
        example: 0
  TeamRequest:
    type: object
    properties:
      id:
        type: integer
        example: 0
      name:
        type: string
        example: Super team
      locationIds:
        type: array
        items:
          $ref: '#/definitions/LocationId'
      organizationId:
        type: integer
        example: 0
  LocationTriple:
    type: object
    properties:
      id:
        type: string
        example: CZ0323
      name:
        type: string
        example: Plzeň-město
      type:
        $ref: '#/definitions/LocationType'
